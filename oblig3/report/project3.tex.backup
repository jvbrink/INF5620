\documentclass[a4paper, 11pt, notitlepage, english]{article}

\usepackage{babel}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc, url}
\usepackage{textcomp}
\usepackage{amsmath, amssymb}
\usepackage{amsbsy, amsfonts}
\usepackage{graphicx, color}
\usepackage{parskip}
\usepackage{framed}
\usepackage{amsmath}
\usepackage{xcolor}
\usepackage{multicol}
\usepackage{url}
\usepackage{flafter}


\usepackage{geometry}
\geometry{headheight=0.01mm}
\geometry{top=24mm, bottom=29mm, left=39mm, right=39mm}

\renewcommand{\arraystretch}{2}
\setlength{\tabcolsep}{10pt}
\makeatletter
\renewcommand*\env@matrix[1][*\c@MaxMatrixCols c]{%
  \hskip -\arraycolsep
  \let\@ifnextchar\new@ifnextchar
  \array{#1}}
%
% Parametere for inkludering av kode fra fil
%
\usepackage{listings}
\lstset{language=python}
\lstset{basicstyle=\ttfamily\small}
\lstset{frame=single}
\lstset{keywordstyle=\color{red}\bfseries}
\lstset{commentstyle=\itshape\color{blue}}
\lstset{showspaces=false}
\lstset{showstringspaces=false}
\lstset{showtabs=false}
\lstset{breaklines}

%
% Definering av egne kommandoer og miljøer
%
\newcommand{\dd}[1]{\ \text{d}#1}
\newcommand{\f}[2]{\frac{#1}{#2}} 
\newcommand{\beq}{\begin{equation*}}
\newcommand{\eeq}{\end{equation*}}
\newcommand{\bra}[1]{\langle #1|}
\newcommand{\ket}[1]{|#1 \rangle}
\newcommand{\braket}[2]{\langle #1 | #2 \rangle}
\newcommand{\braup}[1]{\langle #1 \left|\uparrow\rangle\right.}
\newcommand{\bradown}[1]{\langle #1 \left|\downarrow\rangle\right.}
\newcommand{\av}[1]{\left| #1 \right|}
\newcommand{\op}[1]{\hat{#1}}
\newcommand{\braopket}[3]{\langle #1 | {#2} | #3 \rangle}
\newcommand{\ketbra}[2]{\ket{#1}\bra{#2}}
\newcommand{\pp}[1]{\frac{\partial}{\partial #1}}
\newcommand{\ppn}[1]{\frac{\partial^2}{\partial #1^2}}
\newcommand{\up}{\left|\uparrow\rangle\right.}
\newcommand{\upup}{\left|\uparrow\uparrow\rangle\right.}
\newcommand{\down}{\left|\downarrow\rangle\right.}
\newcommand{\downdown}{\left|\downarrow\downarrow\rangle\right.}
\newcommand{\updown}{\left|\uparrow\downarrow\rangle\right.}
\newcommand{\downup}{\left|\downarrow\uparrow\rangle\right.}
\newcommand{\bupup}{\left.\langle\uparrow\uparrow\right|}
\newcommand{\bdowndown}{\left.\langle\downarrow\downarrow\right|}
\newcommand{\bupdown}{\left.\langle\uparrow\downarrow\right|}
\newcommand{\bdownup}{\left.\langle\downarrow\uparrow\right|}
\renewcommand{\d}{{\rm d}}
\newcommand{\Res}[2]{{\rm Res}(#1;#2)}
\newcommand{\To}{\quad\Rightarrow\quad}
\newcommand{\eps}{\epsilon}



\newcommand{\bt}[1]{\boldsymbol{#1}}
\newcommand{\mat}[1]{\textsf{\textbf{#1}}}
\newcommand{\I}{\boldsymbol{\mathcal{I}}}
\newcommand{\p}{\partial}
\newcommand{\D}{\mbox{D}}
%
% Navn og tittel
%
\author{Emilie Fjørner \\[-0.4cm] \texttt{e.s.fjorner@fys.uio.no} \\[0.2cm] Jonas van den Brink \\[-0.4cm] \texttt{j.v.d.brink@fys.uio.no}}
\title{INF5620 --- Project 3 \\ Nonlinear diffusion equation}


\begin{document}
\maketitle

\vspace{1cm}

\section*{Description}


In this problem we solve a nonlinear diffusion equation model using the finite element method.

\clearpage

\section*{The Partial Differential Equation}

Formulated as a PDE problem, the nonlinear diffusion model we will be solving has the following form:

\begin{align} 
\rho u_t &= \nabla \cdot (\alpha(u)\nabla u) + f(\bt{x},t) \mbox{ on } \Omega, \\[0.2cm]
\frac{\p u}{\p n} &= 0 \hspace{3.6cm} \mbox{ on } \delta \Omega.
\end{align}

We are solving for the scalar field $u$. The coefficient $\rho$ is a known, real constant and $\alpha$ is a known function of the solution $u$, making the equation 
nonlinear. The domain $\Omega$ has the boundary $\delta\Omega$ and we see that we have a Neumann boundary condition for the entire boundary.

\subsection*{a) Variational Form}

We sample our PDE at the time $t_n$ and use the Crank-Nicolson scheme to approximate the time-derivative. This gives us the following implicit scheme
$$ \rho \frac{u^{n+1}-u^n}{\Delta t} = \frac{1}{2} \bigg(\nabla \cdot (\alpha(u^{n+1})\nabla u^{n+1}) + f^{n+1} + \nabla \cdot (\alpha(u^n)\nabla u^n) + f^n.\bigg)$$
We want to reformulate the PDE as a variational problem. To acheive this we multiply by a test function $v$, and integrate over the entire spatial domain $\Omega$

\begin{align*}
\frac{2\rho}{\Delta t} \bigg(\int_\Omega u^{n+1} v \ \d x - \int_\Omega u^n v\  \d x \bigg) &= \int_\Omega\nabla \cdot(\alpha(u^{n+1})\nabla u^{n+1})v\ \d x \ + \int_\Omega f^{n+1}v\ \d x \\
& + \int_\Omega\nabla\cdot(\alpha(u^n)\nabla u^n)v\ \d x \ + \int_\Omega f^nv\ \d x
\end{align*}

Using integration by parts on the integrals containing the double derivative of the trial function $u$, and our Neumann boundary condition this becomes

\begin{align*}
\frac{2\rho}{\Delta t} \bigg(\int_\Omega u^{n+1} v \ \d x - \int_\Omega u^n v\  \d x \bigg) &= - \int_\Omega \alpha(u^{n+1})\nabla u^{n+1}\cdot\nabla v\ \d x \ + \int_\Omega f^{n+1}v\ \d x \\
& - \int_\Omega \alpha(u^n)\nabla u^n\cdot\nabla v\ \d x \ + \int_\Omega f^nv\ \d x
\end{align*}

\subsection*{b) and c) Picard iteration}

We now have a nonlinear system to solve, and we want to use a Picard iteration method to reformulate this as a linear problem. Renaming the solution to be found, 
$u^{n+1}$  as simply $u$, and the solution at the previous time step $u_p$, we use $u_p$ as our initial guess for the Picard iteration. Our formulation becomes 

\begin{align*}
\frac{2\rho}{\Delta t} \bigg(\int_\Omega u^{k+1} v \ \d x - \int_\Omega u_p v\  \d x \bigg) &= \int_\Omega\nabla \cdot(\alpha(u^{k})\nabla u^{k+1})v\ \d x \ + \int_\Omega f v\ \d x \\
& + \int_\Omega\nabla\cdot(\alpha(u_p)\nabla u_p)v\ \d x \ + \int_\Omega f_pv\ \d x
\end{align*}

with $k^0=u_p$.

We restrict this Picard iteration to a single iteration. This is equivalent to simply letting the argument of the $\alpha$-function be $u_p$ in both of the integrals 
where it appears. 

\begin{align*}
\frac{2\rho}{\Delta t} \bigg(\int_\Omega u v \ \d x - \int_\Omega u_p v\  \d x \bigg) &= \int_\Omega\nabla \cdot(\alpha(u_p)\nabla u)v\ \d x \ + \int_\Omega f v\ \d x \\
& + \int_\Omega\nabla\cdot(\alpha(u_p)\nabla u_p)v\ \d x \ + \int_\Omega f_pv\ \d x
\end{align*}


\subsection*{d) Convergence rate study}

As a first verification of our FEniCS implementation we set $\alpha(u)=1$, $f=0$, $I(x,y) = \cos(\pi x).$ We solve the equation on the two-dimensional domain $\Omega = [0,1] \times [0, 1]$ using P1 elements. The PDE then has the known solution
$$u(x,y,t) = e^{-\pi^2 t}\cos (\pi x).$$
To test the convergence rate, we solve for many different values of 
$$h = \Delta t^2 = \Delta x ^2,$$
and calculate the error at the time $T=3.0$. The results are shown in table \ref{table:convergence1}

From the results we see that as $h$ is lowered, the error is decreasing quite smoothly and that $E/h$ remains approximately constant.

\subsection*{e) Method of manufactured solutions}
We now solve for the exact solution
$$u_e(x,t) = t x^2 (\frac{1}{2}-\frac{x}{3}),$$
with $\alpha = 1+u^2$ on the one-dimensional domain $\Omega = [0,1]$. Through the use of sympy we compute the corresponding source term that yields the given exact solution. We solve with the resulting source term and find the error of the computed solution by comparing with the known exact solution at the times $T=0.1$ $T=0.5$, $T=1.0$ again we solve for different values of $h$.



\begin{table}
\centering
\begin{tabular}{c | c | c}
 $h$ & $E$ & $E/h$ \\ \hline
 1.0e+00  & 1.563e-02     & 1.563e-02 \\ \hline
 5.0e-01  & 3.580e-05     & 7.161e-05 \\ \hline
 1.0e-01  & 1.816e-04     & 1.816e-03 \\ \hline
 5.0e-02  & 4.147e-05     & 8.293e-04 \\ \hline
 1.0e-02  & 1.951e-06     & 1.951e-04 \\ \hline
 5.0e-03  & 4.624e-07     & 9.248e-05 \\ \hline
 1.0e-03  & 1.862e-08     & 1.862e-05 \\ 
\end{tabular}
\caption{Measure of error as $h$ is decreased. \label{table:convergence1}}
\end{table}






\end{document}

